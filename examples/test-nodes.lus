type t = { one: int; two: real; three: bool };

node Z(x: bool) returns (y: t);
let
  y = if x then
        t { one=0; two=1.0; three = true } 
      else
        t { one=1; two=2.0; three = false };
tel;

node X(x: int) returns (y: int);
var z: int; v: t; 
let 
  v = Z(true);
  y = pre pre x + v.one;
  z = pre x;
tel;

node nodecall (x: int) returns (f: bool; v: int);
let
  f = false;
  v = 0;
tel;

node Y(x: int; r: real) returns (y: int; value: int);
var
  flag: bool;
  v: t;
let
  v = Z(true);
  y = X(pre x + v.one);
  (flag, value) = if x > 0 then nodecall(x) else (true, 0);
tel; 


node check1(x: int, r: real) returns (ok: bool);
let
  (y, value) = Y(x,r);
  ok = y > 0;
tel

node V(x: int) returns (y: int^3);
let
  y = (x + 1)^3;
tel

node W(x: int) returns (y: int);
var y_3 : int^3;
let
  y_3 = 1^3 + V(x);
  y = y_3[0];
tel;


node U0(x: int) returns (y: int);
let y = pre x + 1; tel;

node U1(const x0: int; y0: real) returns (x1: int; y1:  real);
var t: int;
let 
  x1, y1 = [x0 + t, y0]; 
  t = pre t + U0(x1);
tel;

node check2() returns (ok: bool);
var x, x1, xp: int; y, y1: real;
let
  x, y = U1(U1(1, 2.0));

  x1, y1 = U1(pre x, y);
  xp = pre pre x;

  ok = x > 0;
tel;


